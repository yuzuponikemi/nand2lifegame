<class>
  <keyword> class </keyword>
  <class0> Main </class0>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <subroutine0> main </subroutine0>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <VarDec>
        <keyword> var </keyword>
        <class> SquareGame </class>
        <var0> game </var0>
        <symbol> ; </symbol>
      </VarDec>
      <Statements>
        <letStatement>
          <keyword> let </keyword>
          <var0> game </var0>
          <symbol> = </symbol>
          <expression>
            <term>
              <class> SquareGame </class>
              <symbol> . </symbol>
              <subroutine> new </subroutine>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <var0> game </var0>
          <symbol> . </symbol>
          <subroutine> run </subroutine>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <var0> game </var0>
          <symbol> . </symbol>
          <subroutine> dispose </subroutine>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
