<class>
  <keyword> class </keyword>
  <class0> Square </class0>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <field0> x </field0>
    <symbol> , </symbol>
    <field1> y </field1>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <field2> size </field2>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <class0> Square </class0>
    <subroutine0> new </subroutine0>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <arg0> Ax </arg0>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <arg1> Ay </arg1>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <arg2> Asize </arg2>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <letStatement>
          <keyword> let </keyword>
          <field0> x </field0>
          <symbol> = </symbol>
          <expression>
            <term>
              <arg0> Ax </arg0>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <field1> y </field1>
          <symbol> = </symbol>
          <expression>
            <term>
              <arg1> Ay </arg1>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <field2> size </field2>
          <symbol> = </symbol>
          <expression>
            <term>
              <arg2> Asize </arg2>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutine> draw </subroutine>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine1> dispose </subroutine1>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <doStatement>
          <keyword> do </keyword>
          <class> Memory </class>
          <symbol> . </symbol>
          <subroutine> deAlloc </subroutine>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine2> draw </subroutine2>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <doStatement>
          <keyword> do </keyword>
          <class> Screen </class>
          <symbol> . </symbol>
          <subroutine> setColor </subroutine>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class> Screen </class>
          <symbol> . </symbol>
          <subroutine> drawRectangle </subroutine>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field0> x </field0>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field1> y </field1>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field0> x </field0>
              </term>
              <symbol> + </symbol>
              <term>
                <field2> size </field2>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field1> y </field1>
              </term>
              <symbol> + </symbol>
              <term>
                <field2> size </field2>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine3> erase </subroutine3>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <doStatement>
          <keyword> do </keyword>
          <class> Screen </class>
          <symbol> . </symbol>
          <subroutine> setColor </subroutine>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class> Screen </class>
          <symbol> . </symbol>
          <subroutine> drawRectangle </subroutine>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field0> x </field0>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field1> y </field1>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field0> x </field0>
              </term>
              <symbol> + </symbol>
              <term>
                <field2> size </field2>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field1> y </field1>
              </term>
              <symbol> + </symbol>
              <term>
                <field2> size </field2>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine4> incSize </subroutine4>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <field1> y </field1>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <field2> size </field2>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 254 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &amp; </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <field0> x </field0>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <field2> size </field2>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 510 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutine3> erase </subroutine3>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field2> size </field2>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field2> size </field2>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutine2> draw </subroutine2>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine5> decSize </subroutine5>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field2> size </field2>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutine3> erase </subroutine3>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field2> size </field2>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field2> size </field2>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutine2> draw </subroutine2>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine6> moveUp </subroutine6>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field1> y </field1>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <field1> y </field1>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <field2> size </field2>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field1> y </field1>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field1> y </field1>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine7> moveDown </subroutine7>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <field1> y </field1>
                </term>
                <symbol> + </symbol>
                <term>
                  <field2> size </field2>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 254 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field1> y </field1>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field1> y </field1>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <field1> y </field1>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <field2> size </field2>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine8> moveLeft </subroutine8>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field0> x </field0>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <field0> x </field0>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <field2> size </field2>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field0> x </field0>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field0> x </field0>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine9> moveRight </subroutine9>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <Statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <field0> x </field0>
                </term>
                <symbol> + </symbol>
                <term>
                  <field2> size </field2>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 510 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field0> x </field0>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field0> x </field0>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> setColor </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class> Screen </class>
              <symbol> . </symbol>
              <subroutine> drawRectangle </subroutine>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <field0> x </field0>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <field2> size </field2>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field0> x </field0>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field1> y </field1>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <field2> size </field2>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </Statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </Statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
