// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load, sel[0..2]=address[11..13], a=sel0,b=sel1,c=sel2,d=sel3,e=sel4,f=sel5,g=sel6,h=sel7);
	RAM4K(in=in[0..15], load=sel0, address[0..11]=address[0..11],out=out0);
	RAM4K(in=in[0..15], load=sel1, address[0..11]=address[0..11],out=out1);
    RAM4K(in=in[0..15], load=sel2, address[0..11]=address[0..11],out=out2);
	RAM4K(in=in[0..15], load=sel3, address[0..11]=address[0..11],out=out3);
	RAM4K(in=in[0..15], load=sel4, address[0..11]=address[0..11],out=out4);
	RAM4K(in=in[0..15], load=sel5, address[0..11]=address[0..11],out=out5);
	RAM4K(in=in[0..15], load=sel6, address[0..11]=address[0..11],out=out6);
	RAM4K(in=in[0..15], load=sel7, address[0..11]=address[0..11],out=out7);
	Mux8Way16(a[0..15]=out0, b[0..15]=out1, c[0..15]=out2, d[0..15]=out3,e[0..15]=out4, f[0..15]=out5, g[0..15]=out6, h[0..15]=out7,sel[0..2]=address[11..13],out[0..15]=out[0..15]);
}