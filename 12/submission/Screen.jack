// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean cur_colour;
	static int white_pixel;
	static int black_pixel;
	static boolean white;
	static boolean black;
	
    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let white = false;
		let black = true;
		let white_pixel = 0;
		let black_pixel = 1;
		let cur_colour = black;
		return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while( i < 8192 ){
			let screen[i] = white;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let cur_colour = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int addr;
    	var int mask;
    	
		let addr = (32*y) + (x/16);
		let mask = twoToThe(x & 15);
		//set the (x%16)th bit of the val to the current color
		if( cur_colour) {
			let screen[addr] = screen[addr] | mask;
		}
		else{
			let screen[addr] = screen[addr] & ~mask;
		}
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    	var int a, b, diff;
		a = 0;
		b = 0;
		let diff = 0;
		while((a=<dx)and(b=<dy)){
			do drawPixel((x+a), (y+b));
			//decide if to go right or up
			if(diff<0){let a = a+1; let diff = diff + dy;}
			else	  {let b = b+1; let diff = diff - dx;}
    }
    
        function void drawHorizontalLine( int x1, int x2, int y ) {
        var int start_addr, end_addr;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = (y*32) + (x1/16);
        let end_addr = (y*32) + (x2/16) + (x2mod16=0);

        if( start_addr = end_addr ) {   // line starts and ends within the same screen address
            do Screen.draw_short_horizontal_line( x1, x2, y );
        }
        else { 
            if( ~(x1mod16 = 0) ) {      // Draw the short start of the line
                let start_addr = start_addr + 1;
                do Screen.draw_short_horizontal_line( x1, x1+16-x1mod16, y );
            }
            if( ~(x2mod16 = 0) ) {      // Draw the short end of the line
                let end_addr = end_addr - 1;
                do Screen.draw_short_horizontal_line( x2-x2mod16, x2, y );
            }
            while( ~(start_addr > end_addr) ) {     // Draw the middle of the line
                let screen[start_addr] = cur_colour;
                let start_addr = start_addr + 1;
            }
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int y;
		
		let y = y1;
		while( ~(y>y2)) {
			do Screen.drawHorizontalLine(x1, x2, y);
			let y = y + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy;
		var int rsquared;
		 
		let rsquared = r*r;
		let dy = -r;
		
		while( ~(dy > r) ) {
			let dx = Math.sqrt(rsquared -(dy*dy));
			do Screen.drawHorizontalLine( cx-dx, cx+dx, cy+dy);
			let dy = dy+1;
		}
		return;
    }
}
