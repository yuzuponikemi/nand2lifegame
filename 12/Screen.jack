// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static boolean ColourIsBlack;
    static Array screen;
	
    /** Initializes the Screen. */
    function void init() {
		let ColourIsBlack = true;
		let screen = 16384;
		return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 16384;
		while( i < 24576 ){
			let screen[i] = false;
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let ColourIsBlack = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int addr;
    	var int mask;
    	
		let addr = (32*y) + (x/16);
		let mask = Math.twoToThe(x & 15);  // 'x & 15' means 'x mod 16'
		//set the (x%16)th bit of the val to the current color
		if( ColourIsBlack) {
			let screen[addr] = screen[addr] | mask; //black
		}
		else{
			let screen[addr] = screen[addr] & ~mask; //white
		}
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        do Screen.drawDiagonalLine(x1, x2, y1, y2, dx, dy);
        return;
    }
    
    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp;

        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int x2, int y1, int y2, int dx, int dy) {
        var int a, b, adyMinusbdx, yIncrement;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        if (dy < 0) {
            let yIncrement = -1;
        } else {
            let yIncrement = 1;
        }

        while (~(a > dx) & (((yIncrement = 1) & ~(b > dy)) | ((yIncrement = -1) & ~(b < dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * yIncrement);
            } else {
                let b = b + yIncrement;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int y;
		
		let y = y1;
		while( ~(y>y2)) {
			do Screen.drawHorizontalLine(x1, x2, y);
			let y = y + 1;
		}
		return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
