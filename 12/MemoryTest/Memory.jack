// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array freelist;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let freelist = 2048; //heapbase
		let freelist[0] = 0; //next = null
		let freelist[1] = 14335; //length( = entire heap = 16383 - 14335)
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. 
	 1 first fit -- use first one available
	 2 best fit -- search the smallest available
	 available -->> segment.size >= size+2
	 (if no segment found, return failure)
	 block = base addr of the found space
	 update the freelist and the fields of block
		to account for the allocation
	return block
	 
	 2 propaties can be handled as below
	 next -- heap[addr-2] block[0]
	 size -- heap[addr-1] block[1]
	 addr -- 	     	  block+2
	 
	 */
    function int alloc(int size) {
    	var Array block;
    	var int blocknext, blocksize;
    	var Array newblock;
    	// first fit
    	let block = freelist; // try first block
    	let blocksize = freelist[1];
    	let blocknext = freelist[0];
    	if (blocksize > (size+2)){
    		let freelist = freelist + size + 2; 
    		let freelist[0] = 0;//next=null
    		let freelist[1] = blocksize - size - 2;//length -> (loses block+2)
    		let block[0] = 0;
    		let block[1] = size;
    		return block + 2; // addr returned
    	}
    	while (~(blocknext = 0)) { //try second to the end
    		let block = blocknext;
    		let blocksize = block[1];
    		let blocknext = block[0];
    		if ( blocksize > (size + 2)) {
    			let blocksize = blocksize - size - 2;
    			let block[1] = blocksize;
				let newblock = block + blocksize;
				let newblock[0] = 0;
				let newblock[1] = size;
				return newblock + 2;
			}
		}
		return -1;  //no segment available
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. 
	 Append object to the end of the freelist
	 */
    function void deAlloc(Array o) {
    	var Array blocknext, blocknextnext;
		let blocknext = freelist;
		let blocknextnext = freelist[0];
		while (~(blocknextnext = 0)) {
			let blocknext = blocknextnext;
			let blocknextnext = blocknext[0];
		}
		let blocknextnext = 0;
		return;
    	
    }    
}
